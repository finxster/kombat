package io.kombat.domain.dao;

import io.kombat.domain.model.Character;
import io.kombat.domain.model.Game;

import javax.enterprise.context.Dependent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.sql.Timestamp;
import java.util.Map;

import io.kombat.domain.dao.FilterType;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.Map;
import com.google.common.base.Joiner;

/**
 * Created by Bruno de Queiroz<creativelikeadog@gmail.com> on 27/11/15.
 */
#sql context CharacterContext;

@Dependent
public class CharacterDAOImpl implements CharacterDAO {

    #sql public static iterator CharacterIter(Long id, String name, Long game, String picture, Timestamp created, Timestamp updated, String game_name);

    private static final long serialVersionUID = 9009122476700684924L;

    private CharacterContext context;

    static {
        try {
            Class.forName("oracle.jdbc.OracleDriver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public CharacterDAOImpl() {
        try {
            this.context = new CharacterContext(String.format("jdbc:oracle:thin:@%s:%s:XE", HOST, PORT), USER, PASSWORD, true);
        } catch (SQLException e) {
            return;
        }
    }

    private Character one(String query) throws SQLException {
        CharacterIter characters;

        String finalQuery = String.format(
          "SELECT "+
          "  c.id_character as id,"+
          "  c.name as name,"+
          "  c.game_id as game,"+
          "  c.picture as picture,"+
          "  c.created as created,"+
          "  c.updated as updated,"+
          "  g.name as game_name"+
          " FROM characters c "+
          " INNER JOIN games g ON g.id_game = c.game_id WHERE %s ", query);

        Connection conn = context.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(finalQuery);

        List<Character> results = new ArrayList<Character>();

        #sql[context] characters = { CAST :rs };

        if (characters.next()) {
            return new Character(characters.id(), characters.name(), new Game(characters.game(), characters.game_name()), characters.picture(), characters.created(), characters.updated());
        }

        return null;
    }

    @Override
    public Character one(Long id) throws SQLException {
        return this.one(String.format("id_character = %d", id));
    }

    @Override
    public Character oneByGame(Long id, Long gameId) throws SQLException {
        return this.one(String.format("id_character = %d AND game_id = %d", id, gameId));
    }

    @Override
    public void save(Character character) throws SQLException {

        Long id = character.getId();
        String name = character.getName();
        String picture = character.getPicture();

        #sql[context] {UPDATE characters SET name = :name, picture = :picture, updated = systimestamp WHERE id_character = :id };
    }

    @Override
    public void create(Character model) throws SQLException {
        Long game = model.getGame().getId();
        String name = model.getName();
        String picture = model.getPicture();

        #sql[context] {INSERT INTO characters(id_character, name, game_id, picture) VALUES( characters_seq.nextval, :name, :game, :picture ) };
    }

    @Override
    public void destroy(Long id) throws SQLException {
        #sql[context] {DELETE FROM characters WHERE id_character = :id};
    }

    @Override
    public void destroyByGame(Long id) throws SQLException {
        #sql[context] {DELETE FROM characters WHERE game_id = :id};
    }

    @Override
    public void destroyByGame(Long id, Long gameId) throws SQLException {
        #sql[context] {DELETE FROM characters WHERE id_character = :id AND game_id = :gameId};
    }

    @Override
    public List<Character> fetch(Map<String, String[]> params, Integer offset, Integer limit) throws SQLException {

        String finalQuery;
        StringBuilder wrapper = new StringBuilder("SELECT i.* FROM ( %s ) i WHERE i.rnum > %d");
        StringBuilder query = new StringBuilder();

        query.append("SELECT ");
        query.append("  c.id_character as id,");
        query.append("  c.name as name,");
        query.append("  c.game_id as game,");
        query.append("  c.picture as picture,");
        query.append("  c.created as created,");
        query.append("  c.updated as updated,");
        query.append("  g.name as game_name,");
        query.append("  rownum as rnum");
        query.append(" FROM characters c ");
        query.append(" INNER JOIN games g ON g.id_game = c.game_id WHERE 1 = 1 ");

        if( params != null ){
            query.append( FilterType.parse( "id", "id_character", params, FilterType.EXACT ) );
            query.append( FilterType.parse( "name", "c.name", params, FilterType.LIKE ) );
            query.append( FilterType.parse( "game", "g.name", params, FilterType.LIKE ) );
            query.append( FilterType.parse( "updated", "c.updated", params, FilterType.TIME_GREATER ) );
            query.append( FilterType.parse( "game_id", "g.id_game", params, FilterType.EXACT ) );
        }

        if( offset == null ){
            offset = 0;
        }

        if (limit != null && limit > -1 ){
            wrapper.append(String.format(" AND i.rnum <= %d", offset + limit));
        }

        finalQuery = String.format(wrapper.toString(), query.toString(), offset);

        Connection conn = context.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(finalQuery);

        CharacterIter characters = null;

        List<Character> results = new ArrayList<Character>();

        #sql[context] characters = { CAST :rs };

        while(characters.next()) {
            results.add(new Character(characters.id(), characters.name(), new Game(characters.game(), characters.game_name()), characters.picture(), characters.created(), characters.updated()));
        }

        return results;
    }
}
