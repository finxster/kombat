package io.kombat.domain.dao;

import io.kombat.domain.model.Game;
import io.kombat.domain.util.FilterType;
import com.google.common.base.Joiner;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.sql.Timestamp;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;

import javax.enterprise.context.Dependent;
import java.io.Serializable;
import javax.inject.Inject;
import java.util.Map;

/**
 * Created by Bruno de Queiroz<creativelikeadog@gmail.com> on 26/11/15.
 */
#sql context GameContext;

@Dependent
public class GameDAOImpl implements GameDAO {

    #sql public static iterator GameIter(Long id, String slug, String name, String picture, Timestamp created, Timestamp updated);

    private static final long serialVersionUID = 2741059994483786816L;

    private GameContext context;

    @Inject
    private CharacterDAO characters;

    static {
        try {
            Class.forName("oracle.jdbc.OracleDriver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public GameDAOImpl() {
        try {
            this.context = new GameContext(String.format("jdbc:oracle:thin:@%s:%s:XE", HOST, PORT), USER, PASSWORD, true);
        } catch (SQLException e) {
            return;
        }
    }

    private Game one(String query) throws SQLException {
        GameIter games;

        Connection conn = context.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(String.format("SELECT id_game as id, name, slug, picture, created, updated FROM games WHERE %s", query));

        List<Game> results = new ArrayList<Game>();

        #sql[context] games = { CAST :rs };

        if (games.next()) {
            return new Game(games.id(), games.name(), games.slug(), games.picture(), games.created(), games.updated());
        }

        return null;
    }

    @Override
    public Game one(Long id) throws SQLException {
        return this.one(String.format("id_game = %d", id));
    }

    @Override
    public Game oneBySlug(String slug) throws SQLException {
        return this.one(String.format("slug = '%s'", slug));
    }

    public void save(Game game) throws SQLException {

        Long id = game.getId();
        String name = game.getName();
        String slug = game.getSlug();
        String picture = game.getPicture();

        #sql[context] {UPDATE games SET name = :name, slug = :slug, picture = :picture, updated = systimestamp WHERE id_game = :id };
    }

    public void create(Game game) throws SQLException {

        String name = game.getName();
        String slug = game.getSlug();
        String picture = game.getPicture();

        #sql[context] {INSERT INTO games(id_game, name, slug, picture) VALUES( GAMES_SEQ.nextval, :name, :slug, :picture ) };
    }

    public void destroy(Long id) throws SQLException {
        characters.destroyByGame(id);
        #sql[context] {DELETE FROM games WHERE id_game = :id};
    }

    private String orderBy(Map<String,String[]> params){
        String[] fields = params.get("order");
        String[] directions = params.get("asc");

        String field = "created";
        String direction = "DESC";

        if( fields != null && fields.length > 0 ){
            if ( !fields[0].isEmpty() ){
                field = fields[0];
            }
        }

        if( directions != null && directions.length > 0 ){
            if ( !directions[0].isEmpty() ){
                direction = Boolean.valueOf(directions[0]) ? "ASC" : "DESC";
            }
        }

        return String.format(" ORDER BY i.%s %s", field, direction);
    }

    @Override
    public List<Game> fetch(Map<String, String[]> params, Integer offset, Integer limit) throws SQLException {

        String finalQuery;
        StringBuilder wrapper = new StringBuilder("SELECT i.* FROM ( %s ) i WHERE i.rnum > %d ");
        StringBuilder query = new StringBuilder("SELECT id_game as id, name, slug, picture, created, updated, rownum as rnum FROM games m WHERE 1=1 ");

        if( params != null ){
            query.append( FilterType.parse( "id", "id_game", params, FilterType.EXACT ) );
            query.append( FilterType.parse( "slug", "slug", params, FilterType.LIKE ) );
            query.append( FilterType.parse( "name", "name", params, FilterType.LIKE ) );
            query.append( FilterType.parse( "updated", "updated", params, FilterType.TIME_GREATER ) );
        }

        if( offset == null ){
            offset = 0;
        }

        if (limit != null && limit > -1 ){
            wrapper.append(String.format(" AND i.rnum <= %d", offset + limit));
        }

        wrapper.append( orderBy(params) );

        finalQuery = String.format(wrapper.toString(), query.toString(), offset);

        Connection conn = context.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(finalQuery);

        GameIter games = null;

        List<Game> results = new ArrayList<Game>();

        #sql[context] games = { CAST :rs };

        while(games.next()) {
            results.add(new Game(games.id(), games.name(), games.slug(), games.picture(), games.created(), games.updated()));
        }

        return results;
    }
}
